{"version":3,"sources":["lib/createCanvas/index.ts","lib/draw/index.ts","lib/listeners/mousePositionListener/index.ts","lib/listeners/index.ts","lib/factories/renderFactory.ts","lib/factories/index.ts","lib/simpleMouseTrack/index.ts","index.ts"],"names":[],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["/**\n *\n * @param target The Dom element to attach the canvas element to.\n * @param width The width of the canvas.\n * @param height The height of the canvas.\n * @param sizeToParent When true the canvas element will fill the dom element it is attached to.\n * @param optClassName An optional class name to append to the canvas element.\n */\nconst createCanvas = (\n  target: string,\n  width = 300,\n  height = 300,\n  sizeToParent = true,\n  optClassName: string | null = null\n): HTMLCanvasElement | null => {\n  let canvas: HTMLCanvasElement;\n  const d: HTMLDivElement = document.querySelector(`#${target}`);\n  const parentWidth = d.getBoundingClientRect().width;\n  const parentHeight = d.getBoundingClientRect().height;\n  if (d) {\n    canvas = document.createElement(\"canvas\") as HTMLCanvasElement;\n    canvas.width = sizeToParent ? parentWidth : width;\n    canvas.height = sizeToParent ? parentHeight : height;\n    canvas.style.position = \"relative\";\n    canvas.style.top = \"0\";\n    canvas.style.left = \"0\";\n    if (optClassName) {\n      canvas.className = optClassName;\n    }\n    d.appendChild(canvas);\n\n    const onResize = (e: Event): void => {\n      console.log(e);\n      const parentWidth = d.getBoundingClientRect().width;\n      const parentHeight = d.getBoundingClientRect().height;\n      canvas.width = parentWidth;\n      canvas.height = parentHeight;\n    };\n    console.log(sizeToParent);\n    if (sizeToParent) {\n      window.addEventListener(\"resize\", onResize, true);\n    }\n  }\n  return canvas ? canvas : null;\n};\n\nexport { createCanvas };\n","import { IDraw } from \"lib/interfaces\";\n/**\n * A function which runs another function in a loop\n * @param render the render function to be run in a loop. It may be paused and re-started with the 'play' and 'pause' methods.\n */\nconst draw = (render: Function): IDraw => {\n  let request: number;\n  const _render = render;\n  const performAnimation = (): void => {\n    request = requestAnimationFrame(performAnimation);\n    //animate something\n    _render && _render();\n  };\n  requestAnimationFrame(performAnimation);\n\n  const play: Function = (): void => {\n    requestAnimationFrame(performAnimation);\n  };\n\n  const pause: Function = (): void => {\n    window.cancelAnimationFrame(request);\n  };\n\n  return { play, pause };\n};\n\nexport { draw };\n","export const mousePositionListener: Function = (\n  element: HTMLCanvasElement,\n  callback: Function\n) => {\n  const onMove = (e: MouseEvent): void => {\n    callback(e);\n  };\n\n  element.addEventListener(\"mousemove\", onMove);\n\n  return (): void => {\n    element.removeEventListener(\"mousemove\", onMove);\n  };\n};\n","export * from \"./mousePositionListener\";\n","import { createCanvas } from \"lib/createCanvas\";\nimport { draw } from \"lib/draw\";\nimport { IDraw } from 'lib/interfaces';\n\nconst renderFactory = (renderer: Function) => (\n  target: string,\n  width = 200,\n  height = 200,\n  sizeToParent = true,\n  optClassName: string | null = null\n): IDraw => {\n  const canvas: HTMLCanvasElement = createCanvas(\n    target,\n    width,\n    height,\n    sizeToParent,\n    optClassName\n  );\n\n  return draw(renderer(canvas));\n};\n\nexport { renderFactory };\n","export * from \"./renderFactory\";\n","import { createCanvas } from \"lib/createCanvas\";\nimport { draw } from \"lib/draw\";\nimport { IDraw } from \"lib/interfaces\";\nimport { mousePositionListener } from \"lib/listeners\";\n\n/**\n *\n * @param context CanvasRenderingContext2D\n */\nconst render: Function = (canvas: HTMLCanvasElement) => {\n  let mouseX = 0;\n  let mouseY = 0;\n  const context: CanvasRenderingContext2D = canvas.getContext(\"2d\"); //as CanvasRenderingContext2D;\n  const onMousePositionChanged = (e: MouseEvent) => {\n    const { offsetX, offsetY } = e;\n    mouseY = offsetY;\n    mouseX = offsetX;\n  };\n  mousePositionListener(canvas, onMousePositionChanged);\n  return () => {\n    const { clientWidth, clientHeight } = canvas;\n    context.clearRect(0, 0, clientWidth, clientHeight);\n    context.fillStyle = \"#000000\";\n    context.fillRect(0, 0, mouseX, mouseY);\n  };\n};\n\nconst simpleMouseTrack = (\n  target: string,\n  width = 900,\n  height = 900\n): IDraw => {\n  const canvas: HTMLCanvasElement = createCanvas(target, width, height, true);\n\n  const { pause, play } = draw(render(canvas));\n  return { pause, play };\n};\n\nexport { simpleMouseTrack };\n","export * from \"lib/createCanvas\";\nexport * from \"lib/draw\";\nexport * from \"lib/listeners\";\nexport * from \"lib/factories\";\n\nexport * from \"./lib/simpleMouseTrack\";\n"]}